import{_ as n,o as s,c as a,e}from"./app-25465c35.js";const t={},o=e(`<h1 id="点亮led-blink" tabindex="-1"><a class="header-anchor" href="#点亮led-blink" aria-hidden="true">#</a> 点亮LED(BLINK)</h1><p>从这里开始直到后面的示例讲解，不再重复演示怎么在各个平台上打开我们的项目工程进行操作。如果你还是不太清楚步骤，请回头查看前面两章的内容再继续阅读。</p><h2 id="硬件准备" tabindex="-1"><a class="header-anchor" href="#硬件准备" aria-hidden="true">#</a> 硬件准备</h2><ul><li>发光二极管(LED灯) * 1</li></ul><p>ESP32-S3有 45 个可编程 GPIO 管脚，除了一些具有特殊用途的GPIO外，大部分GPIO都可以复用。 DShanMCU-Mio没有板载LED灯，所以我们需要将LED灯的正极(较长的那根引脚)接在板子上，默认使用的是 GPIO48 ，负极(较短的那根引脚)接在板子的 GND 引脚上。</p><h2 id="软件准备" tabindex="-1"><a class="header-anchor" href="#软件准备" aria-hidden="true">#</a> 软件准备</h2><p>本次实验的项目代码位于： <code>DShanMCU-Mio_ESP-IDF_Data/02_examples/esp-idf-learn/01_base/02_blink</code> 。</p><blockquote><p>注意，不要将项目代码移动到其他地方，否则后续可能会出现编译报错的问题。后续实验也请保持原有的目录结构进行学习，不要移动项目代码的位置。</p></blockquote><h2 id="打开项目工程" tabindex="-1"><a class="header-anchor" href="#打开项目工程" aria-hidden="true">#</a> 打开项目工程</h2><p>如果你对ESP-IDF不太熟悉请按照上一章节所演示的操作步骤，通过 vscode 打开进行编辑、编译、烧写等操作。有基础的通过可以直接通过终端控制台打开进行操作。</p><h2 id="运行现象" tabindex="-1"><a class="header-anchor" href="#运行现象" aria-hidden="true">#</a> 运行现象</h2><p>直接点击编译即可，烧写到开发板之后。打开 vscode 中的串口控制台（或使用其他串口工具：波特率 115200）即可看到有输出信息。如果已经接上LED灯，那么能看到 LED 灯在闪烁，并且和控制台输出的状态信息一样。</p><h2 id="关键代码解读" tabindex="-1"><a class="header-anchor" href="#关键代码解读" aria-hidden="true">#</a> 关键代码解读</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 将 gpio 重置为默认状态（选择 gpio 功能，启用上拉并禁用输入和输出）。</span>
<span class="token comment">// 这个函数还会将此引脚的 IOMUX 配置为 GPIO 功能，并断开通过 GPIO 矩阵配置的任何其他外设输出。</span>
<span class="token function">gpio_reset_pin</span><span class="token punctuation">(</span>BLINK_GPIO<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置GPIO的方向，如output_only,input_only,output_and_input</span>
<span class="token function">gpio_set_direction</span><span class="token punctuation">(</span>BLINK_GPIO<span class="token punctuation">,</span> GPIO_MODE_OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置 GPIO 的输出电平。</span>
<span class="token function">gpio_set_level</span><span class="token punctuation">(</span>BLINK_GPIO<span class="token punctuation">,</span> s_led_state<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 延时 CONFIG_BLINK_PERIOD 毫秒。</span>
<span class="token comment">// 比如 vTaskDelay(100 / portTICK_PERIOD_MS); 是延时100ms。</span>
<span class="token function">vTaskDelay</span><span class="token punctuation">(</span>CONFIG_BLINK_PERIOD <span class="token operator">/</span> portTICK_PERIOD_MS<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 和printf函数一样，输出日志信息。</span>
<span class="token function">ESP_LOGI</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">&quot;Turning the LED %s!&quot;</span><span class="token punctuation">,</span> s_led_state <span class="token operator">==</span> true <span class="token operator">?</span> <span class="token string">&quot;ON&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;OFF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在ESP-IDF中一般我们使用 ESP_LOGx 输出日志信息，日志打印等级有：</p><ul><li>ESP_LOGE -错误（最低）</li><li>ESP_LOGW - 警告</li><li>ESP_LOGI -信息</li><li>ESP_LOGD -调试</li><li>ESP_LOGV -详细（最高）</li></ul><blockquote><p>为什么不用 printf 打印日志信息？ESP-IDF基于 freeRTOS，而FreeRTOS是一个抢占式的实时多任务系统，抢占就意味着任务之间有优先级，高优先级的任务可以打断低优先级的任务。因为 printf 是一个不可重入函数，而在中断中要避免调用不可重入函数(在freeRTOS多任务中也是一样)。<br>区分一个函数是否可重入就是看这个函数能否在未返回的时候再次被调用。而造成一个函数不可重入的原因往往是使用了全局变量，如果一个函数未返回再执行一次会导致对全局变量的操作是不安全的。就例如我们常用的printf、malloc、free都是不可重入的函数，printf会引用全局变量stdout，malloc，free会引用全局的内存分配表，在多线程的环境下，如果没有很好的处理数据保护和互斥访问，就会发生错误。 <br>所以使用printf是不够安全的，为此ESP-IDF提供了自己的安全接口 <strong>ESP_LOGx</strong>。</p></blockquote><h2 id="修改默认使用的led引脚" tabindex="-1"><a class="header-anchor" href="#修改默认使用的led引脚" aria-hidden="true">#</a> 修改默认使用的LED引脚</h2><p>我想修改默认使用的LED引脚怎么办呢？这很简单，我们只需要在代码中修改一下 BLINK_GPIO 宏即可，但是 BLINK_GPIO 使用的是另一个宏 CONFIG_BLINK_GPIO ，我们可以在 <code>sdkconfig</code> 文件中找到这个宏定。是不是修改这里的宏定义指定的引脚编号就行了呢？</p><p>这是不行的，我们不能直接修改 <code>sdkconfig</code> 文件中的任何内容，因为会不生效，点击编译的时候你会发现它又变回原来的状态了，那么到底应该是在哪里修改这个宏呢？</p><p>其实很简单，esp-idf为我们提供了很好的配置方法，那就是使用 menuconfig 具体使用方法步骤请继续看下面的内容：</p><p>在 vscode 打开终端控制台：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-2_images_001.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-2_images_001"></p><p>在命令行中输入 <code>idf.py menucofig</code> ，然后按回车等待执行完毕之后会出现一个menuconfig配置界面，在这里我们可以通过键盘进行选择、配置：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-2_images_002.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-2_images_002"></p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-2_images_003.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-2_images_003"></p><p>esp-idf menuconfig 基本操作说明：</p><ol><li>按键盘方向键的四个按钮中的 <strong>上键</strong> 和 <strong>下键</strong> 上下切换到不同的选项，高亮部分会跳转在不同的选项上，</li><li>当移动到末尾带有 <code>---&gt;</code> 的选项时，按方向键上的 <strong>右键</strong> 可以进入到其中，进行更多的配置；按 <strong>左键</strong> 回到上一页面</li><li>反之遇到没有 <code>---&gt;</code> 的选项，看情况而定：如果只能配置 使能 或 失能(最左边的符号是 <code>[]</code>)，那么按 <strong>回车键(Enter)</strong> 或 <strong>空格键(Space)</strong> 即可；如果需要输入字符指定(最左边的符号是 <code>()</code>)，那么需要先按 <strong>?</strong> (英文输入模式下)键，查看输入格式要求说明，阅读了解说明之后，按键盘的 <strong>q/Q</strong> (英文输入模式下)键，关闭阅读页面，之后再按 <strong>回车键(Enter)</strong> 或 <strong>空格键(Space)</strong> 打开输入栏进行输入，</li><li>按 <strong>q/Q</strong> (英文输入模式下)键 退出 menuconfig，回到终端控制台，注意保存进行的修改，完全推出前会有提示你是否保存。</li></ol><p>下面我们尝试修改 LED 灯的默认引脚：</p><ol><li>参考上面的操作，打开终端控制台、输入 idf.py menuconfig 进入到 menuconfig 配置界面。</li><li>按 <strong>上键</strong> 和 <strong>下键</strong> 上下切换到不同的选项，找到如下图所示的 <code>Example Configuration ---&gt;</code> 选项：</li></ol><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-2_images_004.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-2_images_004"></p><ol start="3"><li>按 <strong>回车键(Enter)</strong> 或 <strong>空格键(Space)</strong> 进入新页面，继续找到 <code>(48) Blink GPIO number</code> 选项，然后 按 <strong>?</strong> (英文输入模式下)键查看说明信息：</li></ol><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-2_images_005.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-2_images_005"></p><ol start="4"><li><p>按 <strong>q/Q</strong> 键退出说明界面，然后再该选项下按 <strong>回车键(Enter)</strong> 或 <strong>空格键(Space)</strong> 打开输入框，输入你想要配置的引脚编号后按 <strong>回车键(Enter)</strong> 即可：</p></li><li><p>按 <strong>q/Q</strong> (英文输入模式下)键 退出 menuconfig，回到终端控制台，注意保存进行的修改，完全推出前会有提示你是否保存。</p></li></ol><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-2_images_006.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-2_images_006"></p><p>之后就可以重新编译、烧写到开发板，程序会按照刚配置的修改运行。</p><blockquote><p>其实我们可以直接在代码中指定我们想使用的 GPIO 引脚，比如 <code>#define BLINK_GPIO 18</code> 配置项很少的时候这样的方法是没有问题，就算是这样一般我们也不会这么做。<br>menuconfig 能便捷的对工程进行配置，而不需要修改代码，并且其中还能对该配置进行详细的说明，当我们的配置项非常多的时候这就显得尤为重要并且不可或缺。所以最好从一开始就养成使用 menucofig的习惯！</p></blockquote>`,37),i=[o];function p(c,r){return s(),a("div",null,i)}const d=n(t,[["render",p],["__file","chapter4-2.html.vue"]]);export{d as default};
