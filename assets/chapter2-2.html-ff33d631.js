import{_ as o,o as t,c as p,e as h}from"./app-25465c35.js";const a={},e=h('<h1 id="烧写固件" tabindex="-1"><a class="header-anchor" href="#烧写固件" aria-hidden="true">#</a> 烧写固件</h1><p>在开始搭建开发环境之前，我们要先将DshanMCU-Mio(澪)的windos驱动安装好，用于 MicroPython 交互的固件烧录好。</p><h2 id="安装驱动" tabindex="-1"><a class="header-anchor" href="#安装驱动" aria-hidden="true">#</a> 安装驱动</h2><p>我们将 DshanMCU-Mio(澪) 上印有 UART 的 Type-C 接口，通过配套的 Type-C 线连接到我们的PC上的USB接口上，如下图所示：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_001.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_001"></p><p>在 Windows 10 操作系统中，一般在你接上之后不久就会提示正在自动安装驱动。</p><p>我们右键点击 <strong>“我的电脑”</strong> ，然后依次点击： 属性-&gt;设备管理。打开 <strong>设备管理器</strong> 界面之后能看到 <code>端口(COM和LPT)</code>选项， 并且其中有新接入的设备串口(COM)号，说明驱动没有问题，可以正常使用。</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_002.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_002"></p><p>如果 <strong>驱动异常</strong>，那么就是你PC的系统无法自动安装驱动，这时候就需要我们 <strong>手动安装驱动</strong> ，方法如下：</p><p>如果驱动异常，我们新接入的设备会显示一个 <strong>黄色的感叹号</strong>，我们选中这个设备项，然后点击鼠标右键，在弹出的菜单栏中选择 <code>更新驱动程序</code>：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_003.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_003"></p><p>然后会弹出一个页面，我们选择 <code>“浏览计算机查找驱动”</code>：</p><p>驱动的路径选择： <code>DShan-ESP-S3_Arduino学习资料\\03_开发工具\\</code>，点击 <code>“确定”</code> 后就会安装驱动。</p><p>驱动安装完成之后，再检查 <strong>设备管理器</strong> 中是否有串口(COM)号。</p><blockquote><p>资料中的驱动是压缩包，我们要先解压这个压缩包再选择驱动，这里略过解压操作教程。</p></blockquote><h2 id="烧录固件" tabindex="-1"><a class="header-anchor" href="#烧录固件" aria-hidden="true">#</a> 烧录固件</h2><p>DshanMCU-Mio(澪) 中需要烧写用于 MicroPython 交互的固件之后才能用来进行 MicroPython 开发。</p><p>我们将资料包中的 <code>03_开发工具/flash_download_tool_3.9.2_0.zip</code> 解压得到 <code>flash_download_tool_3.9.2</code> 目录：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_004.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_004"></p><p>进入 <code>flash_download_tool_3.9.2</code> 目录，双击 <code>flash_download_tool_3.9.2.exe</code> 打开：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_005.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_005"></p><p>然后会看到弹出了一个大的黑色窗口和一个可以交互小的窗口，在小窗口中按照图中所示逐项地点击对应地下拉框进行选择，三项都和图片中的一样之后，点击 <code>OK</code> 按钮：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_006.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_006"></p><p>然后进入到 flash_download_tool 的主界面：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_007.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_007"></p><p>接下来我们先找到我们要烧写的固件，我们的固件在资料包中的 <code>04_配套固件/</code> 目录中，后续会持续更新固件，现在只有一个固件 <code>GENERIC_S3-20220618-v1.19.1.bin</code>，通过文件名我们可以知道，这个固件是给 ESP32-S3 使用的，编译日期是 2022年06月18日，后续你可以选择你喜欢的固件进行烧写，建议选择编译时间最新的固件进行烧写。</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_008.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_008"></p><p>找到固件所在的目录之后，我们点击 <strong>文件资源管理器</strong> 中的地址栏，将这个地址复制下来，如下图所示：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_009.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_009"></p><p>然后继续来到 flash_download_tool 的主界面，点击第一行的 <code>...</code> 按钮，在新打开的窗口粘贴刚刚复制的路径，然后按回车，然后在进入的目录中选择固件，最后点击打开按钮。操作过程如下图所示：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_010.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_010"></p><p>然后依次按照下图所示进行配置：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_011.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_011"></p><p>然后，先点击 <code>ESASE</code> 按钮进行擦除，等待擦除完成；再点击 <code>START</code> 按钮进行烧写，等待烧写完成：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_012.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_012"></p><p>最后，成功烧写完成提示<strong>FINISH</strong>，然后点击 <code>STOP</code> 按钮，关闭烧写工具：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/MicroPython/chapter2/DShanMCU-Mio_micropython_chapter2-2_images_013.jpg" alt="DShanMCU-Mio_micropython_chapter2-2_images_013"></p><p>至此，用于 MicroPython 交互的固件烧写好了，接下来搭建好开发环境就可以使用 DshanMCU-Mio(澪) 开发板进行 MicroPython 开发了！</p><blockquote><p>这里我们不验证固件是否正常工作，如果使用我们配套的软硬件，那么这个概率低到可以忽略不计。我们验证工作放到了后面的章节中，在搭建好开发环境之后，我们会使用 DshanMCU-Mio(澪) 开发板体验 MicroPython 开发，如果在那个时候你发现不能正常工作，请回到这里的文档，重新烧写一遍固件。</p></blockquote>',39),c=[e];function i(s,n){return t(),p("div",null,c)}const _=o(a,[["render",i],["__file","chapter2-2.html.vue"]]);export{_ as default};
