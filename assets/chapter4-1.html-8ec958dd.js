import{_ as s,r as t,o,c as i,a as p,b as e,d as h,w as _,e as c}from"./app-25465c35.js";const d={},M=p("h1",{id:"运行第一个程序-hello-world",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#运行第一个程序-hello-world","aria-hidden":"true"},"#"),e(" 运行第一个程序(Hello world!)")],-1),n=c('<blockquote><p>我们存放学习资料的路径不要有中文及中文字符和其他特殊字符，建议路径全都是英文+阿拉伯数字+英文标点符号(其中不要使用英文符号<code>(</code> 和 <code>)</code> )。 否则会出现一些意想不到的问题，这都是不必要可以提前避免的问题。</p></blockquote><blockquote><p>如果使用的是 windows 系统，要注意路径长度问题。在编译某些工程可能会编译不过，这时候首先考虑是否路径过长导致的，建议将整个资料包移动到磁盘根目录之后，清除(Full Clean)之后再重新编译。</p></blockquote><h2 id="windows平台" tabindex="-1"><a class="header-anchor" href="#windows平台" aria-hidden="true">#</a> windows平台</h2><p>笔者在 windows 系统中，将资料存放在了 <code>D:\\100ask\\esp32</code> ，路径中没有中文及中文字符和其他特殊字符以及符号<code>(</code> 和 <code>)</code>：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_001.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_001"></p><p>然后进入下面所示的目录，按照提示解压压缩包：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_002.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_002"></p><p>压缩包解压出来之后，我们进入到下面所示的目录，打开我们的第一个项目：</p><h3 id="通过vscode开发" tabindex="-1"><a class="header-anchor" href="#通过vscode开发" aria-hidden="true">#</a> 通过vscode开发</h3><p>我们进入到下面的路径，通过vscode打开我们的项目进行学习开发：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_003.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_003"></p><p>在vscode中打开项目之后，我们先编译看看：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_004.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_004"></p><p>在windows下编译过程需要一些时间(会比在ubuntu下编译慢很多)，但是最后我们会顺利完成编译！接下来我们将程序烧录到我们的开发板中：</p><p>首先，将我们配套的 Type-C 数据线，按照下图所示接到我们的开发板上，另一端接到我们电脑的USB接口上：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_005.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_005"></p><p>然后，我们按照下图的操作在vscode中选择我们开发板的COM口，每次插拔编号可能会不一样也可能还是一样，当你不确定或者出问题的时候可以多插拔几次看看：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_006.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_006"></p><p>最后，在选择COM之后还要选择一个项目，我们这里只打开了一个项目：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_007.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_007"></p><p>然后我们点击烧写按钮，进行烧写：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_008.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_008"></p><p>烧写完成提示：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_009.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_009"></p><p>烧写成功！接下来我们通过vscode打开串口监视器，查看程序运行时的输出信息：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_010.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_010"></p><p>可以看到，在倒计数结束后会进行重启，现在起我们板子中的程序就是这样不断地循环执行。</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_011.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_011"></p><h2 id="ubuntu平台" tabindex="-1"><a class="header-anchor" href="#ubuntu平台" aria-hidden="true">#</a> ubuntu平台</h2><p>笔者在 ubuntu 系统中，使用的是百问网制作好的ubuntu虚拟机，在其中资料示例源码存放在了 <code>~/work</code> 目录下，路径中没有中文及中文字符和其他特殊字符以及符号<code>(</code> 和 <code>)</code>：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_012.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_012"></p><blockquote><p>如果你使用自己的虚拟机或其他linux平台进行开发，请注意遵循上面提到的注意事项。</p></blockquote><h3 id="通过vscode开发-1" tabindex="-1"><a class="header-anchor" href="#通过vscode开发-1" aria-hidden="true">#</a> 通过vscode开发</h3><p>我们进入到下面的路径，通过vscode打开我们的项目进行学习开发：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_013.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_013"></p><p>然后选择通过 Visual Studio Code 打开，然后你会看到打开的界面和在windows 上是一样的：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_014.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_014"></p><p>在vscode中打开项目之后，我们先编译看看：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_004.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_004"></p><p>在windows下编译过程需要一些时间(会比在ubuntu下编译慢很多)，但是最后我们会顺利完成编译！接下来我们将程序烧录到我们的开发板中：</p><p>首先，将我们配套的 Type-C 数据线，按照下图所示接到我们的开发板上，另一端接到我们电脑的USB接口上：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_005.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_005"></p><p>然后我们会看到我们的 VMware Workstation 中提示要将设备连接到哪里，我们按照下图连接到 ubuntu：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_015.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_015"></p><p>如果没有出现这个弹窗，并且按照下面的操作没有出现新的设备(一般是点击下面COM那里没有反应)，此时我们要按照下图这样检查一下，如果没有连接，那么点击连接，如果不确定是哪个选项，可以插拔对比检查看看是哪一个，后面基本都是这个选项：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_016.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_016"></p><p>然后，我们按照下图的操作在vscode中选择我们开发板的COM口(这里引用的图片是上文windows平台的演示图片正常是 <code>/dev/ttyACM0</code> )，每次插拔编号可能会不一样也可能还是一样，当你不确定或者出问题的时候可以多插拔几次看看：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_006.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_006"></p><p>最后，在选择COM之后还要选择一个项目，我们这里只打开了一个项目：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_007.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_007"></p><p>然后我们点击烧写按钮，进行烧写：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_008.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_008"></p><p>烧写完成提示：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_009.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_009"></p><p>烧写成功！接下来我们通过vscode打开串口监视器，查看程序运行时的输出信息：</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_010.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_010"></p><p>可以看到，在倒计数结束后会进行重启，现在起我们板子中的程序就是这样不断地循环执行。</p><p><img src="https://photos.100ask.net/esp32-docs/DShanMCU-Mio/ESP-IDF/chapter4/DShanMCU-Mio_esp-idf_chapter4-1_images_011.jpg" alt="DShanMCU-Mio_esp-idf_chapter4-1_images_011"></p><blockquote><p>除了在 vscode 中打开串口监视器查看程序输入信息外，也可以通过串口工具打开查看程序运行的输出信息，波特率默认为 115200。注意应该要在退出 vscode 的串口监视器之后，再通过串口工具打开。</p></blockquote>',59);function r(S,D){const a=t("RouterLink");return o(),i("div",null,[M,p("p",null,[e("在 "),h(a,{to:"/zh/DShanMCU-Mio/ESP-IDF/DShanMCU-Mio/ESP-IDF/chapter2-1.html"},{default:_(()=>[e("第二章 快速搭建开发环境")]),_:1}),e(" 中已经获取了我们的学习资料，在使用这一份资料之前这里再强调一次：")]),n])}const C=s(d,[["render",r],["__file","chapter4-1.html.vue"]]);export{C as default};
